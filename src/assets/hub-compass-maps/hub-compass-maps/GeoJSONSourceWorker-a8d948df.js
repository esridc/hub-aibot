import { gN as p, bX as r, f as s, i2 as i, gM as B, N as d, W as d$1, s as s$1, bz as S, O as j, ao as v } from './hub-compass-map-4d751555.js';
import { r as rt, s as st, e as et, n as nt, t as tt } from './featureConversionUtils-80dbaef5.js';
import { m } from './FeatureStore-c0155bce.js';
import { f, g } from './projectionSupport-89b75a6e.js';
import { e as ee } from './QueryEngine-07c19075.js';
import { L, I, T } from './geojson-699b445a.js';
import { o, a, i as i$1 } from './clientSideDefaults-6b4f0c14.js';
import { y, d as d$2, c, u, h } from './sourceUtils-16e5008d.js';
import './index-d436d5f8.js';
import './OptimizedGeometry-d99be84d.js';
import './OptimizedFeatureSet-c30cfe93.js';
import './BoundsStore-24b1b12e.js';
import './PooledRBush-cc066bb1.js';
import './timeSupport-e9d3dcb4.js';
import './json-4697dff9.js';
import './WhereClause-5c2264d7.js';
import './executionError-5ec41157.js';
import './QueryEngineCapabilities-3153ed38.js';
import './quantizationUtils-9ada3d42.js';
import './utils-8c2faf04.js';
import './generateRendererUtils-6c7cabac.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
const O={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class C{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)};}destroy(){this._queryEngine?.destroy(),this._queryEngine=this._fieldsIndex=this._createDefaultAttributes=null;}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const i$2=[];await this._checkProjection(e.spatialReference);let r$1=null;e.url&&(r$1=await this._fetch(t?.signal));const n=L(r$1,{geometryType:e.geometryType}),o$1=e.fields||n.fields||[],l=null!=e.hasZ?e.hasZ:n.hasZ,u=n.geometryType;let d=e.objectIdField||n.objectIdFieldName||"__OBJECTID";const p$1=e.spatialReference||p;let c=e.timeInfo;o$1===n.fields&&n.unknownFields.length>0&&i$2.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:n.unknownFields}});let y=new r(o$1).get(d);y?("esriFieldTypeString"!==y.type&&(y.type="esriFieldTypeOID"),y.editable=!1,y.nullable=!1,d=y.name):(y={alias:d,name:d,type:"string"===n.objectIdFieldType?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o$1.unshift(y));const m$1={};for(const a of o$1){if(null==a.name&&(a.name=a.alias),null==a.alias&&(a.alias=a.name),!a.name)throw new s("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!i.jsonValues.includes(a.type))throw new s("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==y.name){const e=B(a);void 0!==e&&(m$1[a.name]=e);}}this._fieldsIndex=new r(o$1);const _=this._fieldsIndex.requiredFields.indexOf(y);if(_>-1&&this._fieldsIndex.requiredFields.splice(_,1),c){if(c.startTimeField){const e=this._fieldsIndex.get(c.startTimeField);e?(c.startTimeField=e.name,e.type="esriFieldTypeDate"):c.startTimeField=null;}if(c.endTimeField){const e=this._fieldsIndex.get(c.endTimeField);e?(c.endTimeField=e.name,e.type="esriFieldTypeDate"):c.endTimeField=null;}if(c.trackIdField){const e=this._fieldsIndex.get(c.trackIdField);e?c.trackIdField=e.name:(c.trackIdField=null,i$2.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:c}}));}c.startTimeField||c.endTimeField||(i$2.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:c}}),c=null);}const I=u?o(u):void 0,b={warnings:i$2,featureErrors:[],layerDefinition:{...O,drawingInfo:I??void 0,templates:a(m$1),extent:void 0,geometryType:u,objectIdField:d,fields:o$1,hasZ:!!l,timeInfo:c}};this._queryEngine=new ee({fields:o$1,geometryType:u,hasM:!1,hasZ:l,objectIdField:d,spatialReference:p$1,timeInfo:c,featureStore:new m({geometryType:u,hasM:!1,hasZ:l}),cacheSpatialQueries:!0}),this._createDefaultAttributes=i$1(m$1,d);const w=await this._createFeatures(r$1);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,w);const T=this._normalizeFeatures(w,b.warnings,b.featureErrors);this._queryEngine.featureStore.addMany(T);const{fullExtent:x,timeExtent:q}=await this._queryEngine.fetchRecomputedExtents();if(b.layerDefinition.extent=x,q){const{start:e,end:t}=q;b.layerDefinition.timeInfo.timeExtent=[e,t];}return b}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([y(t,s),f(e.adds,t),f(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){this._loadOptions.customParameters=e,this._snapshotTask?.abort(),this._snapshotTask=d(this._snapshotFeatures),this._snapshotTask.promise.then((e=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,e);const t=this._normalizeFeatures(e);t&&this._queryEngine.featureStore.addMany(t);}),(e=>{this._queryEngine.featureStore.clear(),d$1(e)||s$1.getLogger("esri.layers.GeoJSONLayer").error(new s("geojson-layer:refresh","An error occurred during refresh",{error:e}));})),await this._waitSnapshotComplete();const{fullExtent:n,timeExtent:a}=await this._queryEngine.fetchRecomputedExtents();return {extent:n,timeExtent:a}}async _createFeatures(e){if(null==e)return [];const{geometryType:t,hasZ:s,objectIdField:i}=this._queryEngine,r=I(e,{geometryType:t,hasZ:s,objectIdField:i});if(!S(this._queryEngine.spatialReference,p))for(const n of r)null!=n.geometry&&(n.geometry=rt(g(st(n.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),p,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise;}catch{}return this._waitSnapshotComplete()}}async _fetch(t){const{url:s,customParameters:i}=this._loadOptions,r=(await j(s,{responseType:"json",query:{...i},signal:t})).data;return await T(r),r}_normalizeFeatures(e,t,s){const{objectIdField:i}=this._queryEngine,r=[];for(const n of e){const e=this._createDefaultAttributes(),a=d$2(this._fieldsIndex,e,n.attributes,!0,t);a?s?.push(a):(this._assignObjectId(e,n.attributes,!0),n.attributes=e,n.objectId=e[i],r.push(n));}return r}async _applyEdits(e){const{adds:t,updates:s,deletes:i}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(r,t),s&&s.length&&this._applyUpdateEdits(r,s),i&&i.length){for(const e of i)r.deleteResults.push(c(e));this._queryEngine.featureStore.removeManyById(i);}const{fullExtent:n,timeExtent:a}=await this._queryEngine.fetchRecomputedExtents();return {extent:n,timeExtent:a,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:i,hasM:r,hasZ:a,objectIdField:o,spatialReference:l,featureStore:u$1}=this._queryEngine,p=[];for(const d of t){if(d.geometry&&i!==v(d.geometry)){s.push(u("Incorrect geometry type."));continue}const t=this._createDefaultAttributes(),r=d$2(this._fieldsIndex,t,d.attributes);if(r)s.push(r);else {if(this._assignObjectId(t,d.attributes),d.attributes=t,null!=d.uid){const t=d.attributes[o];e.uidToObjectId[d.uid]=t;}if(null!=d.geometry){const e=d.geometry.spatialReference??l;d.geometry=g(h(d.geometry,e),e,l);}p.push(d),s.push(c(d.attributes[o]));}}u$1.addMany(et([],p,i,a,r,o));}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:i,hasZ:r,objectIdField:a,spatialReference:o,featureStore:l}=this._queryEngine;for(const u$1 of t){const{attributes:t,geometry:d}=u$1,h$1=t&&t[a];if(null==h$1){e.push(u(`Identifier field ${a} missing`));continue}if(!l.has(h$1)){e.push(u(`Feature with object id ${h$1} missing`));continue}const y=nt(l.getFeature(h$1),s,r,i);if(null!=d){if(s!==v(d)){e.push(u("Incorrect geometry type."));continue}const t=d.spatialReference??o;y.geometry=g(h(d,t),t,o);}if(t){const s=d$2(this._fieldsIndex,y.attributes,t);if(s){e.push(s);continue}}l.add(tt(y,s,r,i,a)),e.push(c(h$1));}}_createObjectIdGenerator(e,t){const s=e.fieldsIndex.get(e.objectIdField);if("esriFieldTypeString"===s.type)return ()=>s.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const r of t)r.objectId&&(i=Math.max(i,r.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,s=!1){const i=this._queryEngine.objectIdField;e[i]=s&&i in t?t[i]:this._objectIdGenerator();}async _checkProjection(e){try{await f(p,e);}catch{throw new s("geojson-layer","Projection not supported")}}}

export default C;

//# sourceMappingURL=GeoJSONSourceWorker-a8d948df.js.map