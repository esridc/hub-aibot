import { iU as a, iV as t, gq as c, gr as j, gp as l, gs as O, $ as a$1, iW as p$1, j6 as i, jB as o, dc as b, aF as f$1, aE as f$2, c2 as L, O as j$1, fE as v, j7 as t$1, f as s, d6 as p$2, cu as w, dd as v$1, gj as _, a1 as e, a2 as y, eR as o$2, eS as r, dK as s$1, gv as f$3, a3 as a$2 } from './hub-compass-map-f4225e12.js';
import { p } from './ArcGISCachedService-470a1017.js';
import { E, f, Y } from './SublayersOwner-d7df6bbe.js';
import { o as o$1 } from './imageBitmapUtils-684da7cb.js';
import './index-d436d5f8.js';
import './TileInfoTilemapCache-4ac61e63.js';
import './TilemapCache-e9464b36.js';
import './ByteSizeUnit-f75ee973.js';
import './QueryTask-2d21d1b2.js';
import './executeForIds-27b5a391.js';
import './query-2dbdcab5.js';
import './pbfQueryUtils-f0f40243.js';
import './pbf-2ae522ce.js';
import './OptimizedGeometry-d99be84d.js';
import './OptimizedFeatureSet-c30cfe93.js';
import './executeQueryJSON-d895488c.js';
import './executeQueryPBF-7663f48b.js';
import './featureConversionUtils-aa77f433.js';
import './sublayerUtils-93d8db31.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
var W;const B=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let C=W=class extends(a(t(E(p(f(c(j(l(O(a$1(p$1(i(o(b)))))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null;}normalizeCtorArgs(e,r){return "string"==typeof e?{url:e,...r}:e}load(e){const r=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(f$1).then((()=>this._fetchService(r)))),Promise.resolve(this)}get attributionDataUrl(){const e=this.parsedUrl?.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){return (e=e||r.tileInfo&&r.tileInfo.spatialReference)&&f$2.fromJSON(e)}writeSublayers(e,r,t,s){if(!this.loaded||!e)return;const i=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray(),o=[],a={writeSublayerStructure:!1,...s};i.forEach((e=>{const r=e.write({},a);o.push(r);}));o.some((e=>Object.keys(e).length>1))&&(r.layers=o);}get tileServers(){return this._getDefaultTileServers(this.parsedUrl?.path)}castTileServers(e){return Array.isArray(e)?e.map((e=>L(e).path)):null}fetchTile(e,t,s,i={}){const{signal:o}=i,a=this.getTileUrl(e,t,s),l={responseType:"image",signal:o,query:{...this.refreshParameters}};return j$1(a,l).then((e=>e.data))}async fetchImageBitmapTile(e,t,s,i={}){const{signal:o}=i;if(this.fetchTile!==W.prototype.fetchTile){const r=await this.fetchTile(e,t,s,i);return o$1(r,e,t,s,o)}const a=this.getTileUrl(e,t,s),l={responseType:"blob",signal:o,query:{...this.refreshParameters}},{data:n}=await j$1(a,l);return o$1(n,e,t,s,o)}getTileUrl(e,r,t){const s=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,i=v({...this.parsedUrl?.query,blankTile:!s&&null,...this.customParameters,token:this.apiKey}),o=this.tileServers;return `${o&&o.length?o[r%o.length]:this.parsedUrl?.path}/tile/${e}/${r}/${t}${i?"?"+i:""}`}loadAll(){return t$1(this,(e=>{e(this.allSublayers);}))}_fetchService(e){return new Promise(((s$1,i)=>{if(this.sourceJSON){if(null!=this.sourceJSON.bandCount&&null!=this.sourceJSON.pixelSizeX)throw new s("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void s$1({data:this.sourceJSON})}if(!this.parsedUrl)throw new s("tile-layer:undefined-url","layer's url is not defined");const o=p$2(this.parsedUrl.path);if(null!=o&&"ImageServer"===o.serverType)throw new s("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");j$1(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(s$1,i);})).then((r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),10.1===this.version&&!w(t))return this._fetchServerVersion(t,e).then((e=>{this.read({currentVersion:e});})).catch((()=>{}))}))}_fetchServerVersion(e,s$1){if(!v$1(e))return Promise.reject();const i=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return j$1(i,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:s$1}).then((e=>{if(e.data&&e.data.currentVersion)return e.data.currentVersion;throw new s("tile-layer:version-not-available")}))}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(null==e)return null;let r;e=e.toLowerCase();for(let t=0,s=B.length;t<s;t++)if(r=B[t],r.toLowerCase().includes(e))return _("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(null==e)return [];const r=-1!==e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i),t=-1!==e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return !this.fetchTile[N]}};e([y({readOnly:!0})],C.prototype,"attributionDataUrl",null),e([y({type:["show","hide","hide-children"]})],C.prototype,"listMode",void 0),e([y({json:{read:!0,write:!0}})],C.prototype,"blendMode",void 0),e([y({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],C.prototype,"isReference",void 0),e([y({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],C.prototype,"operationalLayerType",void 0),e([y({type:Boolean})],C.prototype,"resampling",void 0),e([y()],C.prototype,"sourceJSON",void 0),e([y({type:f$2})],C.prototype,"spatialReference",void 0),e([o$2("spatialReference",["spatialReference","tileInfo"])],C.prototype,"readSpatialReference",null),e([y({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],C.prototype,"path",void 0),e([y({readOnly:!0})],C.prototype,"sublayers",void 0),e([r("sublayers",{layers:{type:[Y]}})],C.prototype,"writeSublayers",null),e([y({json:{read:!1,write:!1}})],C.prototype,"popupEnabled",void 0),e([y()],C.prototype,"tileServers",null),e([s$1("tileServers")],C.prototype,"castTileServers",null),e([y({readOnly:!0,json:{read:!1}})],C.prototype,"type",void 0),e([y(f$3)],C.prototype,"url",void 0),C=W=e([a$2("esri.layers.TileLayer")],C);const N=Symbol("default-fetch-tile");C.prototype.fetchTile[N]=!0;const k=C;

export default k;

//# sourceMappingURL=TileLayer-92f75795.js.map