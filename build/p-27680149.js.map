{"version":3,"names":["isFirefox","test","getUserAgentString","interactiveElementToParent","WeakMap","interceptedClick","disabled","this","HTMLElement","prototype","click","call","onPointerDown","event","interactiveElement","target","get","preventDefault","nonBubblingWhenDisabledMouseEvents","onNonBubblingWhenDisabledMouseEvent","stopImmediatePropagation","captureOnlyOptions","capture","updateHostInteraction","component","hostIsTabbable","el","setAttribute","contains","document","activeElement","blur","blockInteraction","restoreInteraction","removeAttribute","addInteractionListeners","getParentElement","element","addEventListener","forEach","removeInteractionListeners","removeEventListener","connectInteractive","parent","parentElement","set","disconnectInteractive","delete"],"sources":["./node_modules/@esri/calcite-components/dist/collection/utils/interactive.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.4.3\n */\nimport { getUserAgentString } from \"./browser\";\n// ⚠️ browser-sniffing is not a best practice and should be avoided ⚠️\nconst isFirefox = /firefox/i.test(getUserAgentString());\nconst interactiveElementToParent = isFirefox\n  ? new WeakMap()\n  : null;\nfunction interceptedClick() {\n  const { disabled } = this;\n  if (!disabled) {\n    HTMLElement.prototype.click.call(this);\n  }\n}\nfunction onPointerDown(event) {\n  const interactiveElement = event.target;\n  if (isFirefox && !interactiveElementToParent.get(interactiveElement)) {\n    return;\n  }\n  const { disabled } = interactiveElement;\n  if (disabled) {\n    // prevent click from moving focus on host\n    event.preventDefault();\n  }\n}\nconst nonBubblingWhenDisabledMouseEvents = [\"mousedown\", \"mouseup\", \"click\"];\nfunction onNonBubblingWhenDisabledMouseEvent(event) {\n  if (isFirefox && !interactiveElementToParent.get(event.target)) {\n    return;\n  }\n  const { disabled } = event.target;\n  // prevent disallowed mouse events from being emitted on the disabled host (per https://github.com/whatwg/html/issues/5886)\n  //⚠ we generally avoid stopping propagation of events, but this is needed to adhere to the intended spec changes above ⚠\n  if (disabled) {\n    event.stopImmediatePropagation();\n    event.preventDefault();\n  }\n}\nconst captureOnlyOptions = { capture: true };\n/**\n * This helper updates the host element to prevent keyboard interaction on its subtree and sets the appropriate aria attribute for accessibility.\n *\n * This should be used in the `componentDidRender` lifecycle hook.\n *\n * **Notes**\n *\n * this util is not needed for simple components whose root element or elements are an interactive component (custom element or native control). For those cases, set the `disabled` props on the root components instead.\n * technically, users can override `tabindex` and restore keyboard navigation, but this will be considered user error\n *\n * @param component\n * @param hostIsTabbable\n */\nexport function updateHostInteraction(component, hostIsTabbable = false) {\n  if (component.disabled) {\n    component.el.setAttribute(\"tabindex\", \"-1\");\n    component.el.setAttribute(\"aria-disabled\", \"true\");\n    if (component.el.contains(document.activeElement)) {\n      document.activeElement.blur();\n    }\n    blockInteraction(component);\n    return;\n  }\n  restoreInteraction(component);\n  if (typeof hostIsTabbable === \"function\") {\n    component.el.setAttribute(\"tabindex\", hostIsTabbable.call(component) ? \"0\" : \"-1\");\n  }\n  else if (hostIsTabbable === true) {\n    component.el.setAttribute(\"tabindex\", \"0\");\n  }\n  else if (hostIsTabbable === false) {\n    component.el.removeAttribute(\"tabindex\");\n  }\n  else {\n    // noop for \"managed\" as owning component will manage its tab index\n  }\n  component.el.removeAttribute(\"aria-disabled\");\n}\nfunction blockInteraction(component) {\n  component.el.click = interceptedClick;\n  addInteractionListeners(isFirefox ? getParentElement(component) : component.el);\n}\nfunction addInteractionListeners(element) {\n  if (!element) {\n    // this path is only applicable to Firefox\n    return;\n  }\n  element.addEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) => element.addEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions));\n}\nfunction getParentElement(component) {\n  return interactiveElementToParent.get(component.el);\n}\nfunction restoreInteraction(component) {\n  delete component.el.click; // fallback on HTMLElement.prototype.click\n  removeInteractionListeners(isFirefox ? getParentElement(component) : component.el);\n}\nfunction removeInteractionListeners(element) {\n  if (!element) {\n    // this path is only applicable to Firefox\n    return;\n  }\n  element.removeEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) => element.removeEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions));\n}\n/**\n * This utility helps disable components consistently in Firefox.\n *\n * It needs to be called in `connectedCallback` and is only needed for Firefox as it does not call capture event listeners before non-capture ones (see https://bugzilla.mozilla.org/show_bug.cgi?id=1731504).\n *\n * @param component\n */\nexport function connectInteractive(component) {\n  if (!component.disabled || !isFirefox) {\n    return;\n  }\n  const parent = component.el.parentElement || component.el; /* assume element is host if it has no parent when connected */\n  interactiveElementToParent.set(component.el, parent);\n  blockInteraction(component);\n}\n/**\n * This utility restores interactivity to disabled components consistently in Firefox.\n *\n * It needs to be called in `disconnectedCallback` and is only needed for Firefox as it does not call capture event listeners before non-capture ones (see https://bugzilla.mozilla.org/show_bug.cgi?id=1731504).\n *\n * @param component\n */\nexport function disconnectInteractive(component) {\n  if (!isFirefox) {\n    return;\n  }\n  // always remove on disconnect as render or connect will restore it\n  interactiveElementToParent.delete(component.el);\n  restoreInteraction(component);\n}\n"],"mappings":";;;;;;AAOA,MAAMA,EAAY,WAAWC,KAAKC,KAClC,MAAMC,EAA6BH,EAC/B,IAAII,QACJ,KACJ,SAASC,IACP,MAAMC,SAAEA,GAAaC,KACrB,IAAKD,EAAU,CACbE,YAAYC,UAAUC,MAAMC,KAAKJ,KACrC,CACA,CACA,SAASK,EAAcC,GACrB,MAAMC,EAAqBD,EAAME,OACjC,GAAIf,IAAcG,EAA2Ba,IAAIF,GAAqB,CACpE,MACJ,CACE,MAAMR,SAAEA,GAAaQ,EACrB,GAAIR,EAAU,CAEZO,EAAMI,gBACV,CACA,CACA,MAAMC,EAAqC,CAAC,YAAa,UAAW,SACpE,SAASC,EAAoCN,GAC3C,GAAIb,IAAcG,EAA2Ba,IAAIH,EAAME,QAAS,CAC9D,MACJ,CACE,MAAMT,SAAEA,GAAaO,EAAME,OAG3B,GAAIT,EAAU,CACZO,EAAMO,2BACNP,EAAMI,gBACV,CACA,CACA,MAAMI,EAAqB,CAAEC,QAAS,MAc/B,SAASC,EAAsBC,EAAWC,EAAiB,OAChE,GAAID,EAAUlB,SAAU,CACtBkB,EAAUE,GAAGC,aAAa,WAAY,MACtCH,EAAUE,GAAGC,aAAa,gBAAiB,QAC3C,GAAIH,EAAUE,GAAGE,SAASC,SAASC,eAAgB,CACjDD,SAASC,cAAcC,MAC7B,CACIC,EAAiBR,GACjB,MACJ,CACES,EAAmBT,GACnB,UAAWC,IAAmB,WAAY,CACxCD,EAAUE,GAAGC,aAAa,WAAYF,EAAed,KAAKa,GAAa,IAAM,KACjF,MACO,GAAIC,IAAmB,KAAM,CAChCD,EAAUE,GAAGC,aAAa,WAAY,IAC1C,MACO,GAAIF,IAAmB,MAAO,CACjCD,EAAUE,GAAGQ,gBAAgB,WACjC,MAIEV,EAAUE,GAAGQ,gBAAgB,gBAC/B,CACA,SAASF,EAAiBR,GACxBA,EAAUE,GAAGhB,MAAQL,EACrB8B,EAAwBnC,EAAYoC,EAAiBZ,GAAaA,EAAUE,GAC9E,CACA,SAASS,EAAwBE,GAC/B,IAAKA,EAAS,CAEZ,MACJ,CACEA,EAAQC,iBAAiB,cAAe1B,EAAeS,GACvDH,EAAmCqB,SAAS1B,GAAUwB,EAAQC,iBAAiBzB,EAAOM,EAAqCE,IAC7H,CACA,SAASe,EAAiBZ,GACxB,OAAOrB,EAA2Ba,IAAIQ,EAAUE,GAClD,CACA,SAASO,EAAmBT,UACnBA,EAAUE,GAAGhB,MACpB8B,EAA2BxC,EAAYoC,EAAiBZ,GAAaA,EAAUE,GACjF,CACA,SAASc,EAA2BH,GAClC,IAAKA,EAAS,CAEZ,MACJ,CACEA,EAAQI,oBAAoB,cAAe7B,EAAeS,GAC1DH,EAAmCqB,SAAS1B,GAAUwB,EAAQI,oBAAoB5B,EAAOM,EAAqCE,IAChI,CAQO,SAASqB,EAAmBlB,GACjC,IAAKA,EAAUlB,WAAaN,EAAW,CACrC,MACJ,CACE,MAAM2C,EAASnB,EAAUE,GAAGkB,eAAiBpB,EAAUE,GACvDvB,EAA2B0C,IAAIrB,EAAUE,GAAIiB,GAC7CX,EAAiBR,EACnB,CAQO,SAASsB,EAAsBtB,GACpC,IAAKxB,EAAW,CACd,MACJ,CAEEG,EAA2B4C,OAAOvB,EAAUE,IAC5CO,EAAmBT,EACrB,Q"}