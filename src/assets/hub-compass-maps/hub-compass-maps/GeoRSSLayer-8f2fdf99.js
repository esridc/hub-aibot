import { jP as a, dW as m, jQ as n, eW as y, es as S, iU as a$1, iW as p, gq as c, gr as j, iV as t, gs as O, dc as b, gn as Ct, aF as f, O as j$1, X as s, jR as u, a1 as e, a2 as y$1, eR as o, cs as M, jf as v, j9 as c$1, gv as f$1, a3 as a$2 } from './hub-compass-map-f4225e12.js';
import './index-d436d5f8.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
const G=["atom","xml"],L={base:a,key:"type",typeMap:{"simple-line":m},errorContext:"symbol"},R={base:a,key:"type",typeMap:{"picture-marker":n,"simple-marker":y},errorContext:"symbol"},k={base:a,key:"type",typeMap:{"simple-fill":S},errorContext:"symbol"};let _=class extends(a$1(p(c(j(t(O(b))))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss";}normalizeCtorArgs(e,o){return "string"==typeof e?{url:e,...o}:e}readFeatureCollections(e,o){return o.featureCollection.layers.forEach((e=>{const o=e.layerDefinition.drawingInfo.renderer.symbol;o&&"esriSFS"===o.type&&o.outline?.style.includes("esriSFS")&&(o.outline.style="esriSLSSolid");})),o.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?Ct(this.url,G)||"GeoRSS":e||""}set title(e){this._set("title",e);}load(e){const o=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(f).then((()=>this._fetchService(o))).then((e=>{this.read(e,{origin:"service"});}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){const t=this.spatialReference,{data:s$1}=await j$1(s.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:u(t)?void 0:t.wkid??JSON.stringify(t)},signal:e});return s$1}_hasGeometry(e){return this.featureCollections?.some((o=>o.featureSet?.geometryType===e&&o.featureSet.features?.length>0))??!1}};e([y$1()],_.prototype,"description",void 0),e([y$1()],_.prototype,"featureCollections",void 0),e([o("service","featureCollections",["featureCollection.layers"])],_.prototype,"readFeatureCollections",null),e([y$1({type:M,json:{name:"lookAtExtent"}})],_.prototype,"fullExtent",void 0),e([y$1(v)],_.prototype,"id",void 0),e([y$1(c$1)],_.prototype,"legendEnabled",void 0),e([y$1({types:L,json:{write:!0}})],_.prototype,"lineSymbol",void 0),e([y$1({type:["show","hide"]})],_.prototype,"listMode",void 0),e([y$1({types:R,json:{write:!0}})],_.prototype,"pointSymbol",void 0),e([y$1({types:k,json:{write:!0}})],_.prototype,"polygonSymbol",void 0),e([y$1({type:["GeoRSS"]})],_.prototype,"operationalLayerType",void 0),e([y$1(f$1)],_.prototype,"url",void 0),e([y$1({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],_.prototype,"title",null),e([y$1({readOnly:!0,json:{read:!1},value:"geo-rss"})],_.prototype,"type",void 0),_=e([a$2("esri.layers.GeoRSSLayer")],_);const w=_;

export default w;

//# sourceMappingURL=GeoRSSLayer-8f2fdf99.js.map