{"version":3,"names":["defaultMinusSignRegex","RegExp","unnecessaryDecimalRegex","BigDecimal","constructor","input","this","add","num","fromBigInt","value","subtract","multiply","_divRound","SHIFT","divide","integers","decimals","String","split","concat","BigInt","padEnd","DECIMALS","slice","ROUNDED","isNegative","charAt","getIntegersAndDecimals","s","toString","replace","padStart","length","formatToParts","formatter","parts","numberFormatter","unshift","type","minusSign","push","decimal","forEach","char","format","integersFormatted","decimalsFormatted","map","Number","join","repeat","dividend","divisor","bigint","Object","assign","create","prototype","isValidNumber","numberString","isNaN","parseNumberString","stringContainsNumbers","sanitizeExponentialNumberString","nonExpoNumString","containsDecimal","result","filter","i","match","numberKeys","includes","reduce","string","part","allLeadingZerosOptionallyNegative","decimalOnlyAtEndOfString","allHyphensExceptTheStart","isNegativeDecimalOnlyZeros","sanitizeNumberString","sanitizedValue","test","func","firstE","toLowerCase","indexOf","substring","section","some","number","defaultLocale","t9nLocales","locales","numberingSystems","isNumberingSystemSupported","numberingSystem","browserNumberingSystem","Intl","NumberFormat","resolvedOptions","defaultNumberingSystem","getSupportedNumberingSystem","getSupportedLocale","locale","context","contextualLocales","_match","language","region","toUpperCase","console","warn","connectedComponents","Set","connectLocalized","component","updateEffectiveLocale","size","mutationObserver","observe","document","documentElement","attributes","attributeFilter","subtree","effectiveLocale","getLocale","disconnectLocalized","delete","disconnect","createObserver","records","record","el","target","inUnrelatedSubtree","containsCrossShadowBoundary","closestLangEl","closestElementCrossShadowBoundary","closestLang","lang","hasAttribute","NumberStringFormat","delocalize","_numberFormatOptions","trim","_minusSign","_group","_decimal","_digits","_getDigitIndex","localize","_actualGroup","group","digits","_numberFormatter","numberFormatOptions","options","keys","JSON","stringify","useGrouping","reverse","index","Map","d","find","get","numberStringFormatter"],"sources":["./node_modules/@esri/calcite-components/dist/collection/utils/number.js","./node_modules/@esri/calcite-components/dist/collection/utils/locale.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.0.8-next.4\n */\nimport { numberKeys } from \"./key\";\nconst defaultMinusSignRegex = new RegExp(\"-\", \"g\");\nconst unnecessaryDecimalRegex = new RegExp(\"\\\\.?0+$\");\n// adopted from https://stackoverflow.com/a/66939244\nexport class BigDecimal {\n  constructor(input) {\n    this.add = (num) => BigDecimal.fromBigInt(this.value + new BigDecimal(num).value);\n    this.subtract = (num) => BigDecimal.fromBigInt(this.value - new BigDecimal(num).value);\n    this.multiply = (num) => BigDecimal._divRound(this.value * new BigDecimal(num).value, BigDecimal.SHIFT);\n    this.divide = (num) => BigDecimal._divRound(this.value * BigDecimal.SHIFT, new BigDecimal(num).value);\n    if (input instanceof BigDecimal) {\n      return input;\n    }\n    const [integers, decimals] = String(input).split(\".\").concat(\"\");\n    this.value =\n      BigInt(integers + decimals.padEnd(BigDecimal.DECIMALS, \"0\").slice(0, BigDecimal.DECIMALS)) +\n        BigInt(BigDecimal.ROUNDED && decimals[BigDecimal.DECIMALS] >= \"5\");\n    this.isNegative = input.charAt(0) === \"-\";\n  }\n  getIntegersAndDecimals() {\n    const s = this.value\n      .toString()\n      .replace(defaultMinusSignRegex, \"\")\n      .padStart(BigDecimal.DECIMALS + 1, \"0\");\n    const integers = s.slice(0, -BigDecimal.DECIMALS);\n    const decimals = s.slice(-BigDecimal.DECIMALS).replace(unnecessaryDecimalRegex, \"\");\n    return { integers, decimals };\n  }\n  toString() {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    return `${this.isNegative ? \"-\" : \"\"}${integers}${decimals.length ? \".\" + decimals : \"\"}`;\n  }\n  formatToParts(formatter) {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const parts = formatter.numberFormatter.formatToParts(BigInt(integers));\n    this.isNegative && parts.unshift({ type: \"minusSign\", value: formatter.minusSign });\n    if (decimals.length) {\n      parts.push({ type: \"decimal\", value: formatter.decimal });\n      decimals.split(\"\").forEach((char) => parts.push({ type: \"fraction\", value: char }));\n    }\n    return parts;\n  }\n  format(formatter) {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const integersFormatted = `${this.isNegative ? formatter.minusSign : \"\"}${formatter.numberFormatter.format(BigInt(integers))}`;\n    const decimalsFormatted = decimals.length\n      ? `${formatter.decimal}${decimals\n        .split(\"\")\n        .map((char) => formatter.numberFormatter.format(Number(char)))\n        .join(\"\")}`\n      : \"\";\n    return `${integersFormatted}${decimalsFormatted}`;\n  }\n}\n// Configuration: constants\nBigDecimal.DECIMALS = 100; // number of decimals on all instances\nBigDecimal.ROUNDED = true; // numbers are truncated (false) or rounded (true)\nBigDecimal.SHIFT = BigInt(\"1\" + \"0\".repeat(BigDecimal.DECIMALS)); // derived constant\nBigDecimal._divRound = (dividend, divisor) => BigDecimal.fromBigInt(dividend / divisor + (BigDecimal.ROUNDED ? ((dividend * BigInt(2)) / divisor) % BigInt(2) : BigInt(0)));\nBigDecimal.fromBigInt = (bigint) => Object.assign(Object.create(BigDecimal.prototype), { value: bigint });\nexport function isValidNumber(numberString) {\n  return !(!numberString || isNaN(Number(numberString)));\n}\nexport function parseNumberString(numberString) {\n  if (!numberString || !stringContainsNumbers(numberString)) {\n    return \"\";\n  }\n  return sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n    let containsDecimal = false;\n    const result = nonExpoNumString\n      .split(\"\")\n      .filter((value, i) => {\n      if (value.match(/\\./g) && !containsDecimal) {\n        containsDecimal = true;\n        return true;\n      }\n      if (value.match(/\\-/g) && i === 0) {\n        return true;\n      }\n      return numberKeys.includes(value);\n    })\n      .reduce((string, part) => string + part);\n    return isValidNumber(result) ? new BigDecimal(result).toString() : \"\";\n  });\n}\n// regex for number sanitization\nconst allLeadingZerosOptionallyNegative = /^([-0])0+(?=\\d)/;\nconst decimalOnlyAtEndOfString = /(?!^\\.)\\.$/;\nconst allHyphensExceptTheStart = /(?!^-)-/g;\nconst isNegativeDecimalOnlyZeros = /^-\\b0\\b\\.?0*$/;\nexport const sanitizeNumberString = (numberString) => sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n  const sanitizedValue = nonExpoNumString\n    .replace(allHyphensExceptTheStart, \"\")\n    .replace(decimalOnlyAtEndOfString, \"\")\n    .replace(allLeadingZerosOptionallyNegative, \"$1\");\n  return isValidNumber(sanitizedValue)\n    ? isNegativeDecimalOnlyZeros.test(sanitizedValue)\n      ? sanitizedValue\n      : new BigDecimal(sanitizedValue).toString()\n    : nonExpoNumString;\n});\nexport function sanitizeExponentialNumberString(numberString, func) {\n  if (!numberString) {\n    return numberString;\n  }\n  const firstE = numberString.toLowerCase().indexOf(\"e\") + 1;\n  if (!firstE) {\n    return func(numberString);\n  }\n  return numberString\n    .replace(/[eE]*$/g, \"\")\n    .substring(0, firstE)\n    .concat(numberString.slice(firstE).replace(/[eE]/g, \"\"))\n    .split(/[eE]/)\n    .map((section, i) => (i === 1 ? func(section.replace(/\\./g, \"\")) : func(section)))\n    .join(\"e\")\n    .replace(/^e/, \"1e\");\n}\nfunction stringContainsNumbers(string) {\n  return numberKeys.some((number) => string.includes(number));\n}\n","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.0.8-next.4\n */\nimport { closestElementCrossShadowBoundary, containsCrossShadowBoundary } from \"./dom\";\nimport { BigDecimal, isValidNumber, sanitizeExponentialNumberString } from \"./number\";\nimport { createObserver } from \"./observers\";\nexport const defaultLocale = \"en\";\nexport const t9nLocales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"el\",\n  defaultLocale,\n  \"es\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"he\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt-BR\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\"\n];\nexport const locales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"de-CH\",\n  \"el\",\n  defaultLocale,\n  \"en-AU\",\n  \"en-CA\",\n  \"en-GB\",\n  \"es\",\n  \"es-MX\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"fr-CH\",\n  \"he\",\n  \"hi\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"it-CH\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"mk\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\"\n];\nexport const numberingSystems = [\n  \"arab\",\n  \"arabext\",\n  \"bali\",\n  \"beng\",\n  \"deva\",\n  \"fullwide\",\n  \"gujr\",\n  \"guru\",\n  \"hanidec\",\n  \"khmr\",\n  \"knda\",\n  \"laoo\",\n  \"latn\",\n  \"limb\",\n  \"mlym\",\n  \"mong\",\n  \"mymr\",\n  \"orya\",\n  \"tamldec\",\n  \"telu\",\n  \"thai\",\n  \"tibt\"\n];\nexport const supportedLocales = [...new Set([...t9nLocales, ...locales])];\nconst isNumberingSystemSupported = (numberingSystem) => numberingSystems.includes(numberingSystem);\nconst browserNumberingSystem = new Intl.NumberFormat().resolvedOptions().numberingSystem;\nexport const defaultNumberingSystem = browserNumberingSystem === \"arab\" || !isNumberingSystemSupported(browserNumberingSystem)\n  ? \"latn\"\n  : browserNumberingSystem;\nexport const getSupportedNumberingSystem = (numberingSystem) => isNumberingSystemSupported(numberingSystem) ? numberingSystem : defaultNumberingSystem;\n/**\n * Gets the locale that best matches the context.\n *\n * @param locale – the BCP 47 locale code\n * @param context - specifies whether the locale code should match in the context of CLDR or T9N (translation)\n */\nexport function getSupportedLocale(locale, context = \"cldr\") {\n  const contextualLocales = context === \"cldr\" ? locales : t9nLocales;\n  if (!locale) {\n    return defaultLocale;\n  }\n  if (contextualLocales.includes(locale)) {\n    return locale;\n  }\n  locale = locale.toLowerCase();\n  // we support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle\n  if (locale === \"nb\") {\n    return \"no\";\n  }\n  // we use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle\n  if (context === \"t9n\" && locale === \"pt\") {\n    return \"pt-BR\";\n  }\n  if (locale.includes(\"-\")) {\n    locale = locale.replace(/(\\w+)-(\\w+)/, (_match, language, region) => `${language}-${region.toUpperCase()}`);\n    if (!contextualLocales.includes(locale)) {\n      locale = locale.split(\"-\")[0];\n    }\n  }\n  // we can `zh-CN` as base translation for chinese locales which has no corresponding bundle.\n  if (locale === \"zh\") {\n    return \"zh-CN\";\n  }\n  if (!contextualLocales.includes(locale)) {\n    console.warn(`Translations for the \"${locale}\" locale are not available and will fall back to the default, English (en).`);\n    return defaultLocale;\n  }\n  return locale;\n}\nconst connectedComponents = new Set();\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback` before any logic that depends on locale\n *\n * @param component\n */\nexport function connectLocalized(component) {\n  updateEffectiveLocale(component);\n  if (connectedComponents.size === 0) {\n    mutationObserver?.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n      subtree: true\n    });\n  }\n  connectedComponents.add(component);\n}\n/**\n * This is only exported for components that implemented the now deprecated `locale` prop.\n *\n * Do not use this utils for new components.\n *\n * @param component\n */\nexport function updateEffectiveLocale(component) {\n  component.effectiveLocale = getLocale(component);\n}\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectLocalized(component) {\n  connectedComponents.delete(component);\n  if (connectedComponents.size === 0) {\n    mutationObserver.disconnect();\n  }\n}\nconst mutationObserver = createObserver(\"mutation\", (records) => {\n  records.forEach((record) => {\n    const el = record.target;\n    connectedComponents.forEach((component) => {\n      const inUnrelatedSubtree = !containsCrossShadowBoundary(el, component.el);\n      if (inUnrelatedSubtree) {\n        return;\n      }\n      const closestLangEl = closestElementCrossShadowBoundary(component.el, \"[lang]\");\n      if (!closestLangEl) {\n        component.effectiveLocale = defaultLocale;\n        return;\n      }\n      const closestLang = closestLangEl.lang;\n      component.effectiveLocale =\n        // user set lang=\"\" means unknown language, so we use default\n        closestLangEl.hasAttribute(\"lang\") && closestLang === \"\" ? defaultLocale : closestLang;\n    });\n  });\n});\n/**\n * This util helps resolve a component's locale.\n * It will also fall back on the deprecated `locale` if a component implemented this previously.\n *\n * @param component\n */\nfunction getLocale(component) {\n  return (component.el.lang ||\n    closestElementCrossShadowBoundary(component.el, \"[lang]\")?.lang ||\n    document.documentElement.lang ||\n    defaultLocale);\n}\n/**\n * This util formats and parses numbers for localization\n */\nexport class NumberStringFormat {\n  constructor() {\n    this.delocalize = (numberString) => \n    // For performance, (de)localization is skipped if the formatter isn't initialized.\n    // In order to localize/delocalize, e.g. when lang/numberingSystem props are not default values,\n    // `numberFormatOptions` must be set in a component to create and cache the formatter.\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString) => nonExpoNumString\n        .trim()\n        .replace(new RegExp(`[${this._minusSign}]`, \"g\"), \"-\")\n        .replace(new RegExp(`[${this._group}]`, \"g\"), \"\")\n        .replace(new RegExp(`[${this._decimal}]`, \"g\"), \".\")\n        .replace(new RegExp(`[${this._digits.join(\"\")}]`, \"g\"), this._getDigitIndex))\n      : numberString;\n    this.localize = (numberString) => this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString) => isValidNumber(nonExpoNumString.trim())\n        ? new BigDecimal(nonExpoNumString.trim())\n          .format(this)\n          .replace(new RegExp(`[${this._actualGroup}]`, \"g\"), this._group)\n        : nonExpoNumString)\n      : numberString;\n  }\n  get group() {\n    return this._group;\n  }\n  get decimal() {\n    return this._decimal;\n  }\n  get minusSign() {\n    return this._minusSign;\n  }\n  get digits() {\n    return this._digits;\n  }\n  get numberFormatter() {\n    return this._numberFormatter;\n  }\n  get numberFormatOptions() {\n    return this._numberFormatOptions;\n  }\n  /**\n   * numberFormatOptions needs to be set before localize/delocalize is called to ensure the options are up to date\n   */\n  set numberFormatOptions(options) {\n    options.locale = getSupportedLocale(options?.locale);\n    options.numberingSystem = getSupportedNumberingSystem(options?.numberingSystem);\n    if (\n    // No need to create the formatter if `locale` and `numberingSystem`\n    // are the default values and `numberFormatOptions` has not been set\n    (!this._numberFormatOptions &&\n      options.locale === defaultLocale &&\n      options.numberingSystem === defaultNumberingSystem &&\n      // don't skip initialization if any options besides locale/numberingSystem are set\n      Object.keys(options).length === 2) ||\n      // cache formatter by only recreating when options change\n      JSON.stringify(this._numberFormatOptions) === JSON.stringify(options)) {\n      return;\n    }\n    this._numberFormatOptions = options;\n    this._numberFormatter = new Intl.NumberFormat(this._numberFormatOptions.locale, this._numberFormatOptions);\n    this._digits = [\n      ...new Intl.NumberFormat(this._numberFormatOptions.locale, {\n        useGrouping: false,\n        numberingSystem: this._numberFormatOptions.numberingSystem\n      }).format(9876543210)\n    ].reverse();\n    const index = new Map(this._digits.map((d, i) => [d, i]));\n    const parts = new Intl.NumberFormat(this._numberFormatOptions.locale).formatToParts(-12345678.9);\n    this._actualGroup = parts.find((d) => d.type === \"group\").value;\n    // change whitespace group characters that don't render correctly\n    this._group = this._actualGroup.trim().length === 0 ? \" \" : this._actualGroup;\n    this._decimal = parts.find((d) => d.type === \"decimal\").value;\n    this._minusSign = parts.find((d) => d.type === \"minusSign\").value;\n    this._getDigitIndex = (d) => index.get(d);\n  }\n}\nexport const numberStringFormatter = new NumberStringFormat();\n"],"mappings":"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EAA2B,aACjC,MAAMC,EAA2B,WACjC,MAAMC,EAA6B,gBACvB,MAACC,EAAwBpB,GAAiBI,EAAgCJ,GAAeK,IACnG,MAAMgB,EAAiBhB,EACpBlC,QAAQ+C,EAA0B,IAClC/C,QAAQ8C,EAA0B,IAClC9C,QAAQ6C,EAAmC,MAC9C,OAAOjB,EAAcsB,GACjBF,EAA2BG,KAAKD,GAC9BA,EACA,IAAI9E,EAAW8E,GAAgBnD,WACjCmC,CAAgB,IAEf,SAASD,EAAgCJ,EAAcuB,GAC5D,IAAKvB,EAAc,CACjB,OAAOA,CACX,CACE,MAAMwB,EAASxB,EAAayB,cAAcC,QAAQ,KAAO,EACzD,IAAKF,EAAQ,CACX,OAAOD,EAAKvB,EAChB,CACE,OAAOA,EACJ7B,QAAQ,UAAW,IACnBwD,UAAU,EAAGH,GACbhE,OAAOwC,EAAapC,MAAM4D,GAAQrD,QAAQ,QAAS,KACnDZ,MAAM,QACN6B,KAAI,CAACwC,EAASnB,IAAOA,IAAM,EAAIc,EAAKK,EAAQzD,QAAQ,MAAO,KAAOoD,EAAKK,KACvEtC,KAAK,KACLnB,QAAQ,KAAM,KACnB,CACA,SAASgC,EAAsBW,GAC7B,OAAOH,EAAWkB,MAAMC,GAAWhB,EAAOF,SAASkB,IACrD;;;;;GCrHO,MAAMC,EAAgB,KACtB,MAAMC,EAAa,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACAD,EACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,SAEK,MAAME,EAAU,CACrB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,KACAF,EACA,QACA,QACA,QACA,KACA,QACA,KACA,KACA,KACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,SAEK,MAAM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"}